(in-package #:sudoku)

(defun make-sudoku (values)
  "From a list of values of form (r, c, v) where r is the row and c is
the column where v goes, returns a sudoku."
  (let ((sudoku (make-instance 'sudoku)))
    (dolist (r values)
      (let ((i (first r))
            (j (second r))
            (v (third r)))
        (setf (coordinates sudoku i j) v)))    
    sudoku))

(defun read-sudoku (file &optional (blank #\.))
  "Reads a sudoku from a file. By default, reads .ss files correctly."
  (with-open-file (stream file)
    (let ((count -1)
          (lst   nil))
      (do ((char (read-char stream nil)
                 (read-char stream nil)))
          ((null char) (make-sudoku lst))
        (let ((number (digit-char-p char)))
          (cond ((not (null number))
                 (incf count)
                 (multiple-value-call
                     #'(lambda (r c)
                         (push (list r c number) lst))
                   (floor count 9)))
                ((eql char blank) (incf count))))))))

(defun print-sudoku (sudoku)
  "Prints a sudoku."
  (princ " *-----------*")
  (terpri)
  (dotimes (i 9)
    (princ " |")
    (dotimes (j 9)
      (let ((current (coordinates sudoku i j)))
        (if (consp current)
           (princ #\.)
           (princ current))
        (when (or (= j 2)
                (= j 5))
          (princ "|"))))
    (princ "|")
    (terpri)
    (when (or (= i 2)
              (= i 5))
      (princ " |---+---+---|")
      (terpri)))
  (princ " *-----------*"))
